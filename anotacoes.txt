List
    - Adicionar: add(<Object>);
    - Remover: remove(<Object>);
    - Pegar objeto por índice: get(<int: indice>);
    - Tamanho da lista: size() : return int

 Classe Collections:
    - Ordenar lista: sort();

 Para ordenar uma lista de objetos, a classe dee ser Comparable
    (ou seja, implementar a interface Comparable e reescrever o método compareTo)

Para implementar um criterio de comparação em tempo de execução:
    Collections.sort(<lista>, Comparator.comparing(<Object>::<nomeMethodParaUsarComoComparacao>))
   OU
   <lista>.sort(Comparator.comparing(<Object>::<nomeMethodParaUsarComoComparacao>))

- Quando for declarar uma List, defina o tipo mais generico na variavel
- Collections.unmodifiableList(<lista>): Devolve uma lista imutavel (útil como uma boa prática de encapsulamento)

Set:
    - Com o conjunto Set, não se tem a certeza da ordem dos elementos
    - Não há como buscar por indice
    - NÃO permite elementos repetidos
    - Não pode ser ordenado

    É possível navegar sobre as Collections: De Set para List e/ou vice-versa.
    - Collections.unmodifiableSet(<set>): Devolve um conjunto imutavel (útil como uma boa prática de encapsulamento)

    - Collections.emptySet(): Tornar o conjunto vazio, não é possível inserir elementos
    - Collections.synchronizedSet(<set>): Retorna uma coleção que pode ser compartilhada entre threads sem perigos.